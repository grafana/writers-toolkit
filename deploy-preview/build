#!/usr/bin/env bash

set -euf -o pipefail

if [[ -n "${RUNNER_DEBUG+x}" ]]; then
  set -x
fi

# Legacy build.
if [[ -n "${WEBSITE_DIRECTORY}" ]]; then
  echo "::warning ::Using legacy inputs. Reach out to #docs-platform (https://raintank-corp.slack.com/archives/C07R2REUULS) to update."

  readonly WEBSITE_DIRECTORY="${WEBSITE_DIRECTORY:-}"
  readonly SOURCE_DIRECTORY="${SOURCE_DIRECTORY:-}"
  readonly REPO="${REPO:-}"
  readonly INDEX_FILE="${INDEX_FILE:-false}"

  docker run \
         -v "${PWD}/dist:/hugo/dist" \
         -v "${PWD}/${SOURCE_DIRECTORY}:/hugo/${WEBSITE_DIRECTORY}" \
         -e INDEX_FILE \
         -e REPO \
         -e WEBSITE_DIRECTORY \
         --rm grafana/docs-base:latest \
         /bin/bash \
         -c '
if [[ "${INDEX_FILE}" == "true" ]]; then
  echo "Creating custom _index.md" && \
  cat > "/hugo/content/docs/${REPO}/_index.md" <<EOF
---
type: redirect
redirectURL: /docs/${REPO}/latest/
versioned: true
---
EOF
fi
cat "/hugo/content/docs/${REPO}/_index.md"
HUGO_SSI=false hugo --environment=docs --destination=dist/ --baseURL= --minify
'
# End legacy input.
else
  # All input comes from environment variables that are capitalized by convention in this script.
  readonly SOURCES="${SOURCES:-[]}"
  readonly BRANCH="${BRANCH:-}"

  if ! jq -e . <<<"${SOURCES}" >/dev/null; then
    echo "SOURCES environment variable is not valid JSON"

    exit 1
  fi

  if [[ -z "${BRANCH+x}" ]]; then
    echo "BRANCH environment variable is not set. It should be the PR branch name."

    exit 1
  fi

  # Clone a repository to a specific directory.
  function clone {
    local repo=$1
    local directory=$2

    if [[ -d "${directory}" ]]; then
      echo "Directory ${directory} already exists, skipping clone"

      return
    fi

    gh repo clone "grafana/${repo}" "${directory}"
    (cd "${directory}" && gh pr checkout "${BRANCH}")
  }

  # Check out all the source repositories defined in SOURCES.
  function check_out_sources {
    index_files=()
    while read -r repo; do
      if [[ -z "${repo}" ]]; then
        continue
      fi

      clone "${repo}" "src/${repo}"

    done < <(jq -r '.[].repo' <<<"${SOURCES}")
  }

  # Create an entrypoint script for the container.
  function prepare_entrypoint {
    tempfile="$(mktemp -t deploy-preview.XXX)"
    # Pull out the relevant fields from the JSON because the grafana/docs-base image doesn't have jq.
    index_files=()
    while read -r index_file relative_prefix; do
      if [[ "${index_file}" != 'null' ]]; then
        index_files+=("${index_file}:${relative_prefix}")
      fi
    done < <(jq -r '.[] | "\(.index_file) \(.relative_prefix)"' <<<"${SOURCES}")
    cat <<EOSCRIPT >"${tempfile}"
#!/usr/bin/env bash

# Create an index file to redirect a project root to the correct versioned URL.
for pair in ${index_files[@]}; do
  IFS=':' read -r index_file relative_prefix <<<"\${pair}"
  dst="/hugo/\${index_file}"
  parent="\${dst%/*}"
  echo "Creating custom index: \${dst} -> \${relative_prefix}"

  title="\${dst%/*}"
  while [[ -n "\${parent}" ]]; do
    if [[ ! -f "\${parent}/_index.md" ]]; then
       cat > "\${parent}/_index.md" <<EOPARENT
---
title: \${title}
---

# \${title}

{{< section >}}
EOPARENT
    fi
    parent="\${parent%/*}"
  done

  cat > "\${dst}" <<EOINDEX
---
type: redirect
redirectURL: \${relative_prefix}
versioned: true
---
EOINDEX
  cat "\${dst}"
done

HUGO_SSI=false hugo --environment=docs --destination=dist/ --baseURL= --minify
EOSCRIPT
    chmod +x "${tempfile}"
  }

  # Add mounts to the volumes variable.
  function configure_volumes {
    volumes=("--volume=${PWD}/dist:/hugo/dist" "--volume=${tempfile}:/entrypoint:z")
    while read -r repo source_directory website_directory; do
      volumes+=("--volume=${PWD}/src/${repo}/${source_directory}:/hugo/${website_directory}:z")
    done < <(jq -r '.[] | "\(.repo) \(.source_directory) \(.website_directory)"' <<<"${SOURCES}")
  }

  # Prepare the command to run the container.
  function prepare_cmd {
    cat <<EOF
docker run \
${volumes[@]} \
--rm grafana/docs-base:latest \
/entrypoint
EOF
  }

  check_out_sources
  prepare_entrypoint
  declare -a volumes; configure_volumes; readonly volumes
  cmd=$(prepare_cmd)

  echo "${cmd}"
  ${cmd}
fi
