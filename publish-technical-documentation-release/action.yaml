name: Publish technical documentation (release)
description: |
  This action syncs the documentation to the website repository where it is published on the website.
  Use this to publish from release branches that have appropriate tags.

  You need the following permissions on the workflow to fetch secrets from Vault needed by this action.

  ```yaml
  permissions:
    contents: read
    id-token: write
  ```

inputs:
  allow_no_changes:
    default: true
    description: |
      Allow the workflow to succeed if there are no changes to commit.
      This is only going to occur on tags as those events ignore the path filter in the workflow `on.push` section.
    required: true
    type: boolean
  release_branch_regexp:
    description: |
      A regular expression using Extended Regular Expression syntax with capture groups for major, and minor versions.
      For example, '^release-(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$'.
      For more information, refer to https://github.com/grafana/grafana-github-actions/blob/main/has-matching-release-tag/action.yaml#L28-L33.
    required: true
  release_branch_with_patch_regexp:
    default: ""
    description: |
      A regular expression using Extended Regular Expression syntax with capture groups for major, minor, and patch versions.
      For example, '^release-(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$'.
      For more information, refer to https://github.com/grafana/grafana-github-actions/blob/main/has-matching-release-tag/action.yaml#L34-L40.
    required: false
  release_tag_regexp:
    description: |
      A regular expression using Extended Regular Expression syntax with capture groups for major, minor, and patch versions.
      For example, '^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$'.
      For more information, refer to https://github.com/grafana/grafana-github-actions/blob/main/has-matching-release-tag/action.yaml#L22-L27.
    required: true
  source_directory:
    default: docs/sources
    description: Path to source directory, relative to the project root, to sync documentation from.
  tags_only:
    default: false
    description: |
      Set to true for repositories that only release from tags and don't maintain long lived release branches.
  website_branch:
    default: master
    description: |
      Website repository branch to sync the documentation to.
  website_directory:
    description: |
      Website directory to sync the documentation to.
      Documentation goes into a subdirectory whose name is derived from the release branch.
    required: true
  version_suffix:
    default: .x
    description: |
      Optional suffix appended to the version derived from the release branch.
    required: true
runs:
  using: composite
  steps:
    - name: Switch to HEAD of branch for tags
      # Tags aren't necessarily made to the HEAD of the branch.
      # The documentation to be published is always on the HEAD of the branch.
      # However, if the repository only releases from tags, there's no release branch to check out.
      if: github.ref_type == 'tag' && !inputs.tag_only
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}
        GITHUB_REF: ${{ github.ref }}
        RELEASE_BRANCH_REGEXP: ${{ inputs.release_branch_regexp }}
      run: |
        branch="$(${GITHUB_ACTION_PATH}/determine-release-branch "${RELEASE_BRANCH_REGEXP}" "${GITHUB_REF}")"

        if [[ -z "${branch}" ]]; then
          echo "No release branch found for tag ${GITHUB_REF} matching ${RELEASE_BRANCH_REGEXP}. Exiting."

          exit 1
        fi

        git switch --detach "origin/${branch}"
      shell: bash

    - name: Build website
      shell: bash
      run: |
        docker run -v "${PWD}/${{ inputs.source_directory }}:/hugo/${{ inputs.website_directory }}" --rm grafana/docs-base:latest /bin/bash -c 'make hugo'

    - id: get-secrets
      uses: grafana/shared-workflows/actions/get-vault-secrets@main
      with:
        common_secrets: |
          PUBLISH_TECHNICAL_DOCUMENTATION_APP_ID=docs-team/publish-technical-documentation:app-id
          PUBLISH_TECHNICAL_DOCUMENTATION_PRIVATE_KEY=docs-team/publish-technical-documentation:key

    - uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: ${{ env.PUBLISH_TECHNICAL_DOCUMENTATION_APP_ID }}
        owner: grafana
        private-key: ${{ env.PUBLISH_TECHNICAL_DOCUMENTATION_PRIVATE_KEY }}

    - name: Checkout sync action
      uses: actions/checkout@v4
      with:
        path: .github/actions/website-sync
        repository: grafana/website-sync
        token: ${{ steps.app-token.outputs.token }}

    - name: Checkout Actions library
      uses: actions/checkout@v4
      with:
        repository: grafana/grafana-github-actions
        path: ./actions

    - name: Install Actions from library
      run: npm install --production --prefix ./actions
      shell: bash

    - name: Determine if there is a matching release tag
      id: has-matching-release-tag
      uses: ./actions/has-matching-release-tag
      with:
        ref_name: ${{ github.ref_name }}
        release_branch_regexp: ${{ inputs.release_branch_regexp }}
        release_branch_with_patch_regexp: ${{ inputs.release_branch_with_patch_regexp }}
        release_tag_regexp: ${{ inputs.release_tag_regexp }}

    - name: Determine technical documentation version
      if: steps.has-matching-release-tag.outputs.bool == 'true'
      uses: ./actions/docs-target
      id: target
      with:
        ref_name: ${{ github.ref_name }}

    - name: Sync to the website repository (release)
      if: steps.has-matching-release-tag.outputs.bool == 'true'
      uses: ./.github/actions/website-sync
      id: publish-release
      with:
        repository: grafana/website
        branch: ${{ inputs.website_branch }}
        host: github.com
        github_pat: grafanabot:${{ steps.app-token.outputs.token }}
        source_folder: ${{ inputs.source_directory }}
        target_folder: ${{ inputs.website_directory }}/${{ steps.target.outputs.target }}${{ inputs.version_suffix }}
        allow_no_changes: ${{ inputs.allow_no_changes }}

    - name: Print release outputs
      if: steps.has-matching-release-tag.outputs.bool == 'true'
      run: |
        test -n '${{ steps.publish-release.outputs.commit_hash }}'
        test -n '${{ steps.publish-release.outputs.working_directory }}'
      shell: bash
